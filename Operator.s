	AREA ARMex, CODE, READONLY
		ENTRY
start
	;reg   ; 	conv					|	maxpool				| 곱셈

	;r0    ; matrix size				| matrix size
	;r1    ; stride						| stride
	;r2    ; convolution size			| max pool
	;r3    ; convolution result size	| max pool result size
	;r4    ; db's first element address
	;r5    ; 			| target data
	;r6    ; 			| largest data
	;r7    ; 			| 
	;r8    ; target store address
	;r9    ; external loop count
	;r10   ; internal loop count
	;r11   ; conv row count
	;r12   ; conv column count

MainStart
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	; 레지스터 선언
	LDR r4, =db;
	LDR r8, Result_data;
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	
	
	
	
	
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	; 컨볼루션에 필요한 기타 등등의 스펙 로딩
	LDR r2, [r4];    load convolution size
	LDR r1, [r4, #4];  load stride size
	LDR r0, [r4, #12];  load matrix size
	SUB r0, r0, r2;
	BL Div
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	
	
	
	
	
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; 컨볼루션
	LDR r0, [r4, #12];  load matrix size
ConLoop1		; loop for result row

ConLoop2		; loop for result column

ConLoop3		; loop for kernel row

ConLoop4		; loop for kernel column


	BPL MaxLoop4
	
	BPL MaxLoop3
	
	BPL MaxLoop2
	
	BPL MaxLoop1
	
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	
	
	
	
	
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	; 맥스풀링에 필요한 기타 등등의 스펙 로딩
	LDR r2, [r4, #8];  load max pool size
	LDR r1, [r4, #4];  load stride size
	LDR r0, [r4, #12];  load matrix size
	SUB r0, r0, r2;
	BL Div
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	
	
	

	
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; 맥스 풀링
	LDR r0, [r4, #12];  load matrix size
	
MaxLoop1		; loop for result row

MaxLoop2		; loop for result column

MaxLoop3		; loop for window row

MaxLoop4		; loop for window column

	
	BPL MaxLoop4	
	
	BPL MaxLoop3
	
	BPL MaxLoop2
	
	BPL MaxLoop1
	
	
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	
	
	
	
	
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	; 끝!
	B Ending
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;





	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	; 두 수의 곱셈 입니다
myMul
	;스택에 잠시 레지스터를 빼두고
	LDR sp, addr1
	STMIA sp!, {r0-r12}
	
	;부가 레지스터들의 정보
	MOV r3, #0		; 음수인 숫자의 갯수를 담는 곳
	MOV r12, #0		; 더하기 직전 시프트 칸 수 세기
	MOV r9, #0		; 최종 결과물 담을 곳
	MOV r7, #31		; 곱셈 시프트 횟수 계산
	
FirTest
	; 첫번째 숫자 음수인지 검사
	MOV r2, r5;
	LSR r2, #31;
	ADD r3, r2, r3;
	CMP r2, #1;
	BMI SecTest
	; 음수이면, 첫번째 숫자를 양수로 변환
	NEG r5, r5
	
SecTest
	; 두번째 숫자 음수인지 검사
	MOV r2, r6;
	LSR r2, #31;
	ADD r3, r2, r3;
	CMP r2, #1;
	BMI MulStart
	; 음수이면, 두번째 숫자를 양수로 변환
	NEG r6, r6
	
MulStart
	; 끝 비트만 남겨보고
	MOV r2, r6
	LSL r2, r7
	LSR r2, #31
	
	; 0이면 그냥 바로 0을, 1이면 11..1을 
	CMP r2, #0
	BEQ Count
	; 31-현재 카운트 숫자 만큼을 시프트 해서 r4에 더하기
	RSB r12, r7, #31
	ADD r9, r9, r5, LSL r12
	
Count	; 반복 횟수를 카운트
	SUB r7, r7, #1
	CMP r7, #19
	BEQ ResultProcessing
	B MulStart
	
ResultProcessing
	CMP r3, #1
	NEGEQ r9, r9
	
	; 메모리에 저장
	STR r9, [r8]
	
	; 레지스터 값을 원상복구 해두고
	LDR sp, addr1
	LDMIA sp, {r0-r12}
	ADD r8, #4;
	
	; 점프된 영역으로 돌아갑니다.
	MOV pc, lr
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	
	
	
	
	
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	; 끝 입니다.
Ending
	MOV pc, #0    ;Program end
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;





	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	; 결과 행렬의 크기를 구하기 위한 임시 가우스 입니다.
Div
	ADD r3, r3, #1
	SUB r0, r0, r1
	CMP r0, #0
	BPL Div
	MOV pc, lr
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	
	
	
	
	
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; data area
	; DCD = 4byte = word
	; 59995000 ~ 60005000
Result_data & &60000000

addr1 & &59995000

db	DCD 5
	DCD 1
	DCD 3
	DCD 10
	DCD 2_00000000000000000000000010011000
	DCD 2_00000000000000000000000010101110
	DCD 2_00000000000000000000000010011010
	DCD 2_00000000000000000000000001111010
	DCD 2_00000000000000000000000010111111
	DCD 2_00000000000000000000000001110011
	DCD 2_00000000000000000000000010110110
	DCD 2_00000000000000000000000001101011
	DCD 2_00000000000000000000000001111011
	DCD 2_00000000000000000000000010110001
	DCD 2_00000000000000000000000001101000
	DCD 2_00000000000000000000000010011011
	DCD 2_00000000000000000000000010111101
	DCD 2_00000000000000000000000010000010
	DCD 2_00000000000000000000000010100111
	DCD 2_00000000000000000000000010000111
	DCD 2_00000000000000000000000010001010
	DCD 2_00000000000000000000000010101111
	DCD 2_00000000000000000000000010100011
	DCD 2_00000000000000000000000010101100
	DCD 2_00000000000000000000000010110011
	DCD 2_00000000000000000000000011000011
	DCD 2_00000000000000000000000010001001
	DCD 2_00000000000000000000000010011000
	DCD 2_00000000000000000000000011000110
	DCD 2_00000000000000000000001110111011
	DCD 2_00000000000000000000000101111001
	DCD 2_11111111111111111111101101111010
	DCD 2_00000000000000000000001100100001
	DCD 2_11111111111111111111110110001110
	DCD 2_00000000000000000000001101010011
	DCD 2_00000000000000000000011100010110
	DCD 2_00000000000000000000010101011001
	DCD 2_11111111111111111111100101000111
	DCD 2_00000000000000000000010110111000
	DCD 2_11111111111111111111111010110111
	DCD 2_00000000000000000000001001110011
	DCD 2_11111111111111111111101101101010
	DCD 2_00000000000000000000001000010011
	DCD 2_00000000000000000000010000001111
	DCD 2_00000000000000000000001001010011
	DCD 2_00000000000000000000000010110010
	DCD 2_11111111111111111111111000100110
	DCD 2_11111111111111111111100001010001
	DCD 2_00000000000000000000010000100001
	DCD 2_00000000000000000000001000010111
	DCD 2_11111111111111111111101111101101
	DCD 2_11111111111111111111111000000110
	DCD 2_00000000000000000000010010100000
	DCD 2_00000000000000000000001100011001
	DCD 2_11111111111111111111110000011110
	DCD 2_00000000000000000000010110000110
	DCD 2_00000000000000000000001000011101
	DCD 2_11111111111111111111101100001000
	DCD 2_00000000000000000000000000110000
	DCD 2_00000000000000000000011110111110
	DCD 2_11111111111111111111101101100011
	DCD 2_00000000000000000000000000010011
	DCD 2_00000000000000000000001100001001
	DCD 2_11111111111111111111111001000101
	DCD 2_11111111111111111111110101011011
	DCD 2_00000000000000000000001000100101
	DCD 2_11111111111111111111110011110011
	DCD 2_11111111111111111111111011000101
	DCD 2_11111111111111111111101011010000
	DCD 2_00000000000000000000010110001101
	DCD 2_00000000000000000000000010100011
	DCD 2_00000000000000000000011100000010
	DCD 2_11111111111111111111110111111101
	DCD 2_00000000000000000000001111111101
	DCD 2_11111111111111111111111101101111
	DCD 2_00000000000000000000010100010101
	DCD 2_00000000000000000000000001001010
	DCD 2_11111111111111111111110111010010
	DCD 2_00000000000000000000010110101010
	DCD 2_00000000000000000000000100100010
	DCD 2_11111111111111111111111101110101
	DCD 2_11111111111111111111111110011111
	DCD 2_11111111111111111111100101000101
	DCD 2_11111111111111111111110001011001
	DCD 2_00000000000000000000011010000000
	DCD 2_00000000000000000000001111111011
	DCD 2_11111111111111111111101111100110
	DCD 2_00000000000000000000001010111001
	DCD 2_00000000000000000000010010010000
	DCD 2_00000000000000000000001100101100
	DCD 2_00000000000000000000001100111111
	DCD 2_11111111111111111111110010000111
	DCD 2_00000000000000000000010010100111
	DCD 2_00000000000000000000011000001010
	DCD 2_11111111111111111111101010010000
	DCD 2_00000000000000000000010010110110
	DCD 2_00000000000000000000011100010110
	DCD 2_11111111111111111111111100110010
	DCD 2_00000000000000000000010000011101
	DCD 2_11111111111111111111110100011110
	DCD 2_11111111111111111111110101101111
	DCD 2_00000000000000000000010000111101
	DCD 2_00000000000000000000011001110111
	DCD 2_11111111111111111111111110100011
	DCD 2_11111111111111111111110011111001
	DCD 2_11111111111111111111101110110101
	DCD 2_11111111111111111111110100010010
	DCD 2_11111111111111111111100111110010
	DCD 2_00000000000000000000010001101010
	DCD 2_11111111111111111111110101010010
	DCD 2_11111111111111111111111111001010
	DCD 2_00000000000000000000001101101001
	DCD 2_11111111111111111111110001101100
	DCD 2_11111111111111111111110111000011
	DCD 2_00000000000000000000010110001100
	DCD 2_00000000000000000000001110001010
	DCD 2_00000000000000000000001001110000
	DCD 2_00000000000000000000011011110001
	DCD 2_00000000000000000000001100110111
	DCD 2_00000000000000000000000001011001
	DCD 2_11111111111111111111100110110101
	DCD 2_11111111111111111111101001011111
	DCD 2_11111111111111111111110111110110
	DCD 2_11111111111111111111100001010101
	DCD 2_00000000000000000000010001101010
	DCD 2_00000000000000000000000111101101
	DCD 2_11111111111111111111101011011101
	DCD 2_11111111111111111111111100111011
	DCD 2_11111111111111111111100110011100
	;16 CF84
	;15 388F
	;13 6F9E
	;1E CF73
	;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;





	END
